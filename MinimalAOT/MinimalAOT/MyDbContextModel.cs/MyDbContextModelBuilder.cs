// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace YourProjectNamespace
{
    public partial class MyDbContextModel
    {
        partial void Initialize()
        {
            var todo = TodoEntityType.Create(this);

            TodoEntityType.CreateAnnotations(todo);

            AddAnnotation("ProductVersion", "8.0.1");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var todo = FindEntityType("Todo")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            todo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var todoTableBase = new TableBase("Todo", null, relationalModel);
            var dueByColumnBase = new ColumnBase<ColumnMappingBase>("DueBy", "TEXT", todoTableBase)
            {
                IsNullable = true
            };
            todoTableBase.Columns.Add("DueBy", dueByColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", todoTableBase);
            todoTableBase.Columns.Add("Id", idColumnBase);
            var isCompleteColumnBase = new ColumnBase<ColumnMappingBase>("IsComplete", "INTEGER", todoTableBase);
            todoTableBase.Columns.Add("IsComplete", isCompleteColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "TEXT", todoTableBase)
            {
                IsNullable = true
            };
            todoTableBase.Columns.Add("Title", titleColumnBase);
            relationalModel.DefaultTables.Add("Todo", todoTableBase);
            var todoMappingBase = new TableMappingBase<ColumnMappingBase>(todo, todoTableBase, true);
            todoTableBase.AddTypeMapping(todoMappingBase, false);
            defaultTableMappings.Add(todoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, todo.FindProperty("Id")!, todoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dueByColumnBase, todo.FindProperty("DueBy")!, todoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isCompleteColumnBase, todo.FindProperty("IsComplete")!, todoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, todo.FindProperty("Title")!, todoMappingBase);

            var tableMappings = new List<TableMapping>();
            todo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var todosTable = new Table("Todos", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", todosTable);
            todosTable.Columns.Add("Id", idColumn);
            var dueByColumn = new Column("DueBy", "TEXT", todosTable)
            {
                IsNullable = true
            };
            todosTable.Columns.Add("DueBy", dueByColumn);
            var isCompleteColumn = new Column("IsComplete", "INTEGER", todosTable);
            todosTable.Columns.Add("IsComplete", isCompleteColumn);
            var titleColumn = new Column("Title", "TEXT", todosTable)
            {
                IsNullable = true
            };
            todosTable.Columns.Add("Title", titleColumn);
            var pK_Todos = new UniqueConstraint("PK_Todos", todosTable, new[] { idColumn });
            todosTable.PrimaryKey = pK_Todos;
            var pK_TodosUc = RelationalModel.GetKey(this,
                "Todo",
                new[] { "Id" });
            pK_Todos.MappedKeys.Add(pK_TodosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TodosUc).Add(pK_Todos);
            todosTable.UniqueConstraints.Add("PK_Todos", pK_Todos);
            relationalModel.Tables.Add(("Todos", null), todosTable);
            var todosTableMapping = new TableMapping(todo, todosTable, true);
            todosTable.AddTypeMapping(todosTableMapping, false);
            tableMappings.Add(todosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, todo.FindProperty("Id")!, todosTableMapping);
            RelationalModel.CreateColumnMapping(dueByColumn, todo.FindProperty("DueBy")!, todosTableMapping);
            RelationalModel.CreateColumnMapping(isCompleteColumn, todo.FindProperty("IsComplete")!, todosTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, todo.FindProperty("Title")!, todosTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
